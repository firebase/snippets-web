// This snippet file was generated by processing the source file:
// ./auth-next/link-multiple-accounts.js
//
// To update the snippets in this file, edit the source and then run
// 'npm run snippets'.

// [START account_exists_popup_modular]
import { signInWithPopup, signInWithEmailAndPassword, linkWithCredential } from "firebase/auth";

try {
  // User tries to sign in with Facebook.
  await signInWithPopup(auth, facebookProvider);
} catch (error) {
  // User's email already exists.
  if (error.code === 'auth/account-exists-with-different-credential') {
    // The pending Facebook credential.
    const pendingCred = error.credential;
    // The provider account's email address.
    const email = error.customData.email;

    // Present the user with a list of providers they might have
    // used to create the original account.
    // Then, ask the user to sign in with the existing provider.
    const method = promptUserForSignInMethod();

    if (method === 'password') {
      // TODO: Ask the user for their password.
      // In real scenario, you should handle this asynchronously.
      const password = promptUserForPassword();
      const result = signInWithEmailAndPassword(auth, email, password);
      await linkWithCredential(result.user, pendingCred);
      // Facebook account successfully linked to the existing user.
      goToApp();
      return;
    }

    // All other cases are external providers.
    // Construct provider object for that provider.
    // TODO: Implement getProviderForProviderId.
    const provider = getProviderForProviderId(method);
    // At this point, you should let the user know that they already have an
    // account with a different provider, and validate they want to sign in
    // with the new provider.
    // Note: Browsers usually block popups triggered asynchronously, so in
    // real app, you should ask the user to click on a "Continue" button
    // that will trigger signInWithPopup().
    const result = await signInWithPopup(auth, provider);
    // Note: Identity Platform doesn't control the provider's sign-in
    // flow, so it's possible for the user to sign in with an account
    // with a different email from the first one.

    // Link the Facebook credential. We have access to the pending
    // credential, so we can directly call the link method.
    const userCred = await linkWithCredential(result.user, pendingCred);
    // Success.
    goToApp();
  }
}
// [END account_exists_popup_modular]